{"ast":null,"code":"import _objectSpread from \"/Users/adila/Desktop/face-recognition-adila/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/adila/Desktop/face-recognition-adila/src/views/ImageInput.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { loadModels, getFullFaceDescription, createMatcher } from '../api/face'; // Import image to test API\n\nconst testImg = require('../img/test.jpg'); // Import face profile\n\n\nconst JSON_PROFILE = require('../descriptors/bnk48.json'); // Initial State\n\n\nconst INIT_STATE = {\n  imageURL: testImg,\n  fullDesc: null,\n  detections: null,\n  descriptors: null,\n  match: null\n};\n\nclass ImageInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillMount = async () => {\n      await loadModels();\n      this.setState({\n        faceMatcher: await createMatcher(JSON_PROFILE)\n      });\n      await this.handleImage(this.state.imageURL);\n    };\n\n    this.handleImage = async (image = this.state.imageURL) => {\n      await getFullFaceDescription(image).then(fullDesc => {\n        if (!!fullDesc) {\n          this.setState({\n            fullDesc,\n            detections: fullDesc.map(fd => fd.detection),\n            descriptors: fullDesc.map(fd => fd.descriptor)\n          });\n        }\n      });\n\n      if (!!this.state.descriptors && !!this.state.faceMatcher) {\n        let match = await this.state.descriptors.map(descriptor => this.state.faceMatcher.findBestMatch(descriptor));\n        this.setState({\n          match\n        });\n      }\n    };\n\n    this.handleFileChange = async event => {\n      this.resetState();\n      await this.setState({\n        imageURL: URL.createObjectURL(event.target.files[0]),\n        loading: true\n      });\n      this.handleImage();\n    };\n\n    this.resetState = () => {\n      this.setState(_objectSpread({}, INIT_STATE));\n    };\n\n    this.state = _objectSpread({}, INIT_STATE, {\n      faceMatcher: null\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          imageURL = _this$state.imageURL,\n          detections = _this$state.detections,\n          match = _this$state.match;\n    let drawBox = null;\n\n    if (!!detections) {\n      drawBox = detections.map((detection, i) => {\n        let _H = detection.box.height;\n        let _W = detection.box.width;\n        let _X = detection.box._x;\n        let _Y = detection.box._y;\n        return React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            position: 'absolute',\n            border: 'solid',\n            borderColor: 'blue',\n            height: _H,\n            width: _W,\n            transform: \"translate(\".concat(_X, \"px,\").concat(_Y, \"px)\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, !!match && !!match[i] ? React.createElement(\"p\", {\n          style: {\n            backgroundColor: 'blue',\n            border: 'solid',\n            borderColor: 'blue',\n            width: _W,\n            marginTop: 0,\n            color: '#fff',\n            transform: \"translate(-3px,\".concat(_H, \"px)\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, match[i]._label) : null));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"myFileUpload\",\n      type: \"file\",\n      onChange: this.handleFileChange,\n      accept: \".jpg, .jpeg, .png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: 'absolute'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: imageURL,\n      alt: \"imageURL\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), !!drawBox ? drawBox : null));\n  }\n\n}\n\nexport default withRouter(ImageInput);","map":{"version":3,"sources":["/Users/adila/Desktop/face-recognition-adila/src/views/ImageInput.js"],"names":["React","Component","withRouter","loadModels","getFullFaceDescription","createMatcher","testImg","require","JSON_PROFILE","INIT_STATE","imageURL","fullDesc","detections","descriptors","match","ImageInput","constructor","props","componentWillMount","setState","faceMatcher","handleImage","state","image","then","map","fd","detection","descriptor","findBestMatch","handleFileChange","event","resetState","URL","createObjectURL","target","files","loading","render","drawBox","i","_H","box","height","_W","width","_X","_x","_Y","_y","position","border","borderColor","transform","backgroundColor","marginTop","color","_label"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { loadModels, getFullFaceDescription, createMatcher } from '../api/face';\n\n// Import image to test API\nconst testImg = require('../img/test.jpg');\n\n// Import face profile\nconst JSON_PROFILE = require('../descriptors/bnk48.json');\n\n// Initial State\nconst INIT_STATE = {\n  imageURL: testImg,\n  fullDesc: null,\n  detections: null,\n  descriptors: null,\n  match: null\n};\n\nclass ImageInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INIT_STATE, faceMatcher: null };\n  }\n\n  componentWillMount = async () => {\n    await loadModels();\n    this.setState({ faceMatcher: await createMatcher(JSON_PROFILE) });\n    await this.handleImage(this.state.imageURL);\n  };\n\n  handleImage = async (image = this.state.imageURL) => {\n    await getFullFaceDescription(image).then(fullDesc => {\n      if (!!fullDesc) {\n        this.setState({\n          fullDesc,\n          detections: fullDesc.map(fd => fd.detection),\n          descriptors: fullDesc.map(fd => fd.descriptor)\n        });\n      }\n    });\n\n    if (!!this.state.descriptors && !!this.state.faceMatcher) {\n      let match = await this.state.descriptors.map(descriptor =>\n        this.state.faceMatcher.findBestMatch(descriptor)\n      );\n      this.setState({ match });\n    }\n  };\n\n  handleFileChange = async event => {\n    this.resetState();\n    await this.setState({\n      imageURL: URL.createObjectURL(event.target.files[0]),\n      loading: true\n    });\n    this.handleImage();\n  };\n\n  resetState = () => {\n    this.setState({ ...INIT_STATE });\n  };\n\n  render() {\n    const { imageURL, detections, match } = this.state;\n\n    let drawBox = null;\n    if (!!detections) {\n      drawBox = detections.map((detection, i) => {\n        let _H = detection.box.height;\n        let _W = detection.box.width;\n        let _X = detection.box._x;\n        let _Y = detection.box._y;\n        return (\n          <div key={i}>\n            <div\n              style={{\n                position: 'absolute',\n                border: 'solid',\n                borderColor: 'blue',\n                height: _H,\n                width: _W,\n                transform: `translate(${_X}px,${_Y}px)`\n              }}\n            >\n              {!!match && !!match[i] ? (\n                <p\n                  style={{\n                    backgroundColor: 'blue',\n                    border: 'solid',\n                    borderColor: 'blue',\n                    width: _W,\n                    marginTop: 0,\n                    color: '#fff',\n                    transform: `translate(-3px,${_H}px)`\n                  }}\n                >\n                  {match[i]._label}\n                </p>\n              ) : null}\n            </div>\n          </div>\n        );\n      });\n    }\n\n    return (\n      <div>\n        <input\n          id=\"myFileUpload\"\n          type=\"file\"\n          onChange={this.handleFileChange}\n          accept=\".jpg, .jpeg, .png\"\n        />\n        <div style={{ position: 'relative' }}>\n          <div style={{ position: 'absolute' }}>\n            <img src={imageURL} alt=\"imageURL\" />\n          </div>\n          {!!drawBox ? drawBox : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ImageInput);"]},"metadata":{},"sourceType":"module"}